# -*- coding: utf-8 -*-
"""Tensors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o8B3EDV-QkhHEM1qGe2Ti8pgf52ph5JG

### Pytorch Tensor Tutorial
"""

import torch

"""###Initializing a Tensor"""

my_tensors = torch.tensor([[1,2,3],[4,5,6]])
my_tensors

my_tensors.dtype
my_tensors.shape

#Other methods to initialize a tensor
x = torch.empty((3,3))
x = torch.rand((3,3))
x = torch.zeros((3,3))
x = torch.ones((3,3))
x = torch.eye(3,3)
x = torch.arange(start = 0, end = 5, step =1)
x = torch.linspace(start=0.1, end=1, steps=10)
x = torch.empty(size=(1,5)).normal_(mean=0, std=1)
x = torch.empty(size=(1,5)).uniform_(0,1)
x = torch.diag(torch.ones(3))
x

"""###Converting tensors into other types"""

tensor = torch.arange(4)
tensor

tensor.long() #int64
tensor.short() #int16
tensor.half() ##float16
tensor.float() ##float32
tensor.double() ##float64
tensor.bool()

"""###Array to Tensor Conversion"""

import numpy as np

np_array = np.zeros((5,5))
np_array

tensor = torch.from_numpy(np_array)
tensor

np_array_back = tensor.numpy()
np_array_back

"""### Tensor maths and comparison"""

x = torch.tensor([1,2,3])
y = torch.tensor([9,8,7])

#Addition
z1 = torch.empty(3)
torch.add(x,y, out=z1)
z1

#Subtraction
z2 = y -x
z2

##Division
z3 = torch.true_divide(x, y)
z3

## Exponentiation
z4 = x.pow(3)
z4 = x ** 2
z4

##inplace operations
t = torch.zeros(3)
t.add_(x)
#t+=x

##Simple Comparison
z = x > 0
z

##Matrix Multiplication
x1 = torch.rand((2,5))
x2 = torch.rand((5,3))
x3 = torch.mm(x1, x2)
x3 = x1.mm(x2)
x3

##Matrix Exponentiation
matrix_exp = torch.rand(5,5)
matrix_exp.matrix_power(2)
matrix_exp

##Element wise multiplication
z = x * y
z

#Dot Product
z = torch.dot(x, y)
z

##Batch Matrix Multiplication
batch = 32
n=10
m=20
p=30

tensor1 = torch.rand((batch, n, m))
tensor2 = torch.rand((batch, m, p))
out_bmm = torch.bmm(tensor1, tensor2)
out_bmm

"""### Broadcasting Example

"""

x1 = torch.rand((5,5))
x2 = torch.rand((1,5))
z = x1 - x2
z

z = x1 ** x2
z

"""###Other Useful Tensor Operations"""

sum_x = torch.sum(x, dim=0)
sum_x

values = torch.max(x, dim=0) # x.max(dim=0)
values

value = torch.min(x, dim=0)
value

abs_x = torch.abs(x)
abs_x

z = torch.argmax(x, dim=0)
z

z = torch.argmin(x, dim=0)
z

mean_x = torch.mean(x.float(), dim=0)
mean_x

z = torch.eq(x,y)
z

sorted_y, indices = torch.sort(y, dim=0, descending=False)
sorted_y, indices

z = torch.clamp(x, min=0)
z

x = torch.tensor([1,0,1,1,1,])
z = torch.any(x)
z

z = x.all()
z

"""###Tensor Indexing

"""

batch_size = 10
features = 25
x = torch.rand((batch_size, features))
x[0].shape

x[:, 0].shape

x[2, 0:10] #0:10 -> [0,1,2 ......8,9]

##Fancy indexing
x = torch.arange(10)
indices = [2, 5, 8]
x[indices]

x = torch.rand((3,5))
rows = torch.tensor([1,0])
cols = torch.tensor([4,0])
x[rows, cols].shape

##Advanced Indexing
x = torch.arange(10)
x[(x<2) & (x>8)]

x[x.remainder(2) == 0]

torch.where(x>5, x, x*2)

torch.tensor([0,0,0,1,2,2,3,4]).unique()

x.ndimension()

x.numel()

"""###Tensor Reshaping"""

x = torch.arange(9)
x_3x3 = x.view(3,3)
x_3x3.shape

x_3x3 = x.reshape(3,3)
x_3x3

y = x_3x3.t()
y

y.contiguous().view(9)

x1 = torch.rand((2,5))
x2 = torch.rand((2,5))

z = torch.cat((x1,x2), dim=0)
z.shape

z = torch.cat((x1,x2), dim=1)
z.shape

z = x1.view(-1) ##Flattens the tensor
z.shape

batch = 64
x = torch.rand((batch, 2, 5))
z = x.view(batch, -1)
z.shape

z = x.permute(0,2,1)
z.shape

x = torch.arange(10)
x.unsqueeze(0).shape

z = torch.arange(10).unsqueeze(0).unsqueeze(1)
z.shape

y = z.squeeze(1)
y.shape

